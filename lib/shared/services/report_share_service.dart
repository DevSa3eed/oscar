import 'dart:io';
import 'dart:typed_data';
import 'package:share_plus/share_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:excel/excel.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import '../../features/reports/domain/entities/duty_report.dart';

/// Service for sharing and exporting duty reports in various formats
class ReportShareService {
  static const String _appName = 'Oscar Duty Management';

  /// Share report as text summary
  static Future<void> shareAsText({
    required DutyReport report,
    required String dateRange,
  }) async {
    final reportText = _createTextSummary(report, dateRange);

    await Share.share(reportText, subject: 'Duty Report - $dateRange');
  }

  /// Generate and share report as PDF
  static Future<void> shareAsPdf({
    required DutyReport report,
    required String dateRange,
  }) async {
    try {
      final pdfBytes = await _generatePdfReport(report, dateRange);
      final tempDir = await getTemporaryDirectory();
      final fileName =
          'duty_report_${_formatDateForFileName(report.reportDate)}.pdf';
      final file = File('${tempDir.path}/$fileName');

      await file.writeAsBytes(pdfBytes);

      await Share.shareXFiles(
        [XFile(file.path)],
        subject: 'Duty Report - $dateRange',
        text: 'Duty report generated by $_appName',
      );
    } catch (e) {
      throw Exception('Failed to generate PDF: $e');
    }
  }

  /// Generate and share report as Excel
  static Future<void> shareAsExcel({
    required DutyReport report,
    required String dateRange,
  }) async {
    try {
      final excelBytes = await _generateExcelReport(report, dateRange);
      final tempDir = await getTemporaryDirectory();
      final fileName =
          'duty_report_${_formatDateForFileName(report.reportDate)}.xlsx';
      final file = File('${tempDir.path}/$fileName');

      await file.writeAsBytes(excelBytes);

      await Share.shareXFiles(
        [XFile(file.path)],
        subject: 'Duty Report - $dateRange',
        text: 'Duty report generated by $_appName',
      );
    } catch (e) {
      throw Exception('Failed to generate Excel: $e');
    }
  }

  /// Generate PDF report
  static Future<Uint8List> _generatePdfReport(
    DutyReport report,
    String dateRange,
  ) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        build: (pw.Context context) {
          return [
            // Header
            pw.Header(
              level: 0,
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    _appName,
                    style: pw.TextStyle(
                      fontSize: 24,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.SizedBox(height: 8),
                  pw.Text(
                    'Duty Report - $dateRange',
                    style: pw.TextStyle(
                      fontSize: 18,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    'Generated on ${DateFormat('MMMM d, y \'at\' h:mm a').format(DateTime.now())}',
                    style: pw.TextStyle(fontSize: 12, color: PdfColors.grey600),
                  ),
                ],
              ),
            ),

            pw.SizedBox(height: 24),

            // Summary Section
            pw.Container(
              padding: const pw.EdgeInsets.all(16),
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.grey300),
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Summary',
                    style: pw.TextStyle(
                      fontSize: 16,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.SizedBox(height: 12),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceAround,
                    children: [
                      _buildPdfStatBox(
                        'Total Personnel',
                        report.totalDutyPersons.toString(),
                      ),
                      _buildPdfStatBox(
                        'Present',
                        report.presentCount.toString(),
                      ),
                      _buildPdfStatBox('Absent', report.absentCount.toString()),
                      _buildPdfStatBox(
                        'Compliance',
                        '${report.compliancePercentage.toStringAsFixed(1)}%',
                      ),
                    ],
                  ),
                ],
              ),
            ),

            pw.SizedBox(height: 24),

            // Issues Section
            if (report.issues.isNotEmpty) ...[
              pw.Text(
                'Issues Report (${report.issues.length})',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.SizedBox(height: 12),
              pw.Table(
                border: pw.TableBorder.all(color: PdfColors.grey300),
                columnWidths: {
                  0: const pw.FlexColumnWidth(2),
                  1: const pw.FlexColumnWidth(2),
                  2: const pw.FlexColumnWidth(3),
                  3: const pw.FlexColumnWidth(2),
                },
                children: [
                  // Header row
                  pw.TableRow(
                    decoration: const pw.BoxDecoration(
                      color: PdfColors.grey100,
                    ),
                    children: [
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(8),
                        child: pw.Text(
                          'Name',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(8),
                        child: pw.Text(
                          'Role',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(8),
                        child: pw.Text(
                          'Issues',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(8),
                        child: pw.Text(
                          'Date',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                    ],
                  ),
                  // Data rows
                  ...report.issues.map(
                    (issue) => pw.TableRow(
                      children: [
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(8),
                          child: pw.Text(issue.dutyPersonName),
                        ),
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(8),
                          child: pw.Text(issue.dutyPersonRole),
                        ),
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(8),
                          child: pw.Text(issue.issues.join(', ')),
                        ),
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(8),
                          child: pw.Text(
                            DateFormat('MMM d, y').format(issue.checkDate),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ] else ...[
              pw.Container(
                padding: const pw.EdgeInsets.all(24),
                decoration: pw.BoxDecoration(
                  color: PdfColors.green50,
                  border: pw.Border.all(color: PdfColors.green300),
                  borderRadius: pw.BorderRadius.circular(8),
                ),
                child: pw.Center(
                  child: pw.Text(
                    'No Issues Reported - All personnel are compliant',
                    style: pw.TextStyle(
                      fontSize: 14,
                      color: PdfColors.green700,
                    ),
                  ),
                ),
              ),
            ],

            pw.SizedBox(height: 24),

            // Footer
            pw.Container(
              padding: const pw.EdgeInsets.all(16),
              decoration: pw.BoxDecoration(
                color: PdfColors.grey100,
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Text(
                'Report generated by: ${report.generatedBy}\n'
                'Generated on: ${DateFormat('MMMM d, y \'at\' h:mm a').format(report.createdAt ?? DateTime.now())}',
                style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
              ),
            ),
          ];
        },
      ),
    );

    return pdf.save();
  }

  /// Generate Excel report
  static Future<Uint8List> _generateExcelReport(
    DutyReport report,
    String dateRange,
  ) async {
    final excel = Excel.createExcel();
    final sheet = excel['Duty Report'];

    // Set column widths
    sheet.setColumnWidth(0, 20); // Name
    sheet.setColumnWidth(1, 15); // Role
    sheet.setColumnWidth(2, 30); // Issues
    sheet.setColumnWidth(3, 15); // Date

    int rowIndex = 0;

    // Header
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      _appName,
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .cellStyle = CellStyle(
      bold: true,
      fontSize: 16,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Duty Report - $dateRange',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .cellStyle = CellStyle(
      bold: true,
      fontSize: 14,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Generated on ${DateFormat('MMMM d, y \'at\' h:mm a').format(DateTime.now())}',
    );
    rowIndex += 2;

    // Summary Section
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'SUMMARY',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .cellStyle = CellStyle(
      bold: true,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Total Personnel:',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex))
        .value = IntCellValue(
      report.totalDutyPersons,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Present:',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex))
        .value = IntCellValue(
      report.presentCount,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Absent:',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex))
        .value = IntCellValue(
      report.absentCount,
    );
    rowIndex++;

    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
        .value = TextCellValue(
      'Compliance Rate:',
    );
    sheet
        .cell(CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex))
        .value = DoubleCellValue(
      report.compliancePercentage,
    );
    rowIndex += 2;

    // Issues Section
    if (report.issues.isNotEmpty) {
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
          .value = TextCellValue(
        'ISSUES REPORT (${report.issues.length})',
      );
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
          .cellStyle = CellStyle(
        bold: true,
      );
      rowIndex++;

      // Table headers
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
          .value = TextCellValue(
        'Name',
      );
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex))
          .value = TextCellValue(
        'Role',
      );
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 2, rowIndex: rowIndex))
          .value = TextCellValue(
        'Issues',
      );
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 3, rowIndex: rowIndex))
          .value = TextCellValue(
        'Date',
      );

      // Style headers
      for (int i = 0; i < 4; i++) {
        sheet
            .cell(
              CellIndex.indexByColumnRow(columnIndex: i, rowIndex: rowIndex),
            )
            .cellStyle = CellStyle(
          bold: true,
        );
      }
      rowIndex++;

      // Data rows
      for (final issue in report.issues) {
        sheet
            .cell(
              CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex),
            )
            .value = TextCellValue(
          issue.dutyPersonName,
        );
        sheet
            .cell(
              CellIndex.indexByColumnRow(columnIndex: 1, rowIndex: rowIndex),
            )
            .value = TextCellValue(
          issue.dutyPersonRole,
        );
        sheet
            .cell(
              CellIndex.indexByColumnRow(columnIndex: 2, rowIndex: rowIndex),
            )
            .value = TextCellValue(
          issue.issues.join(', '),
        );
        sheet
            .cell(
              CellIndex.indexByColumnRow(columnIndex: 3, rowIndex: rowIndex),
            )
            .value = TextCellValue(
          DateFormat('MMM d, y').format(issue.checkDate),
        );
        rowIndex++;
      }
    } else {
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
          .value = TextCellValue(
        'No Issues Reported - All personnel are compliant',
      );
      sheet
          .cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: rowIndex))
          .cellStyle = CellStyle(
        bold: true,
      );
    }

    return Uint8List.fromList(excel.save()!);
  }

  /// Create text summary for sharing
  static String _createTextSummary(DutyReport report, String dateRange) {
    return '''
DUTY REPORT - $dateRange

SUMMARY:
• Total Personnel: ${report.totalDutyPersons}
• Present: ${report.presentCount}
• Absent: ${report.absentCount}
• Compliance Rate: ${report.compliancePercentage.toStringAsFixed(1)}%

${report.issues.isNotEmpty ? '''
ISSUES (${report.issues.length}):
${report.issues.map((issue) => '• ${issue.dutyPersonName} (${issue.dutyPersonRole}): ${issue.issues.join(', ')}').join('\n')}
''' : 'No issues reported - All personnel are compliant.'}

Generated: ${DateFormat('MMM d, y \'at\' h:mm a').format(DateTime.now())}
Generated by: ${report.generatedBy}
''';
  }

  /// Build PDF stat box widget
  static pw.Widget _buildPdfStatBox(String label, String value) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        children: [
          pw.Text(
            value,
            style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold),
          ),
          pw.SizedBox(height: 4),
          pw.Text(
            label,
            style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
          ),
        ],
      ),
    );
  }

  /// Format date for file names
  static String _formatDateForFileName(DateTime date) {
    return DateFormat('yyyy-MM-dd').format(date);
  }
}
